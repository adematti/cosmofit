pipeline:
  QSO:
    like:
      class: cosmofit.likelihoods.PowerSpectrumMultipolesLikelihood
      init:
        data: f'{data_dir}/data.npy'
        covariance: f'{data_dir}/mock_*.npy'
        wmatrix: f'{data_dir}/window.npy'
        klim:
          0: [0.05, 0.2]
          2: [0.05, 0.2]
        kstep: 0.02
        zeff: 2.0
        fiducial: DESI
      save: f'{output_dir}/QSO.like.npy'
      load: True
      plot: f'{output_dir}/power.png'
    window:
      class: cosmofit.theories.base.WindowedPowerSpectrumMultipoles
      plot: f'{output_dir}/window.png'
    theory:
      class: cosmofit.theories.bao.DampedBAOWigglesTracerPowerSpectrumMultipoles
      params:
        fixed: ['al*']
        derived: [varied]
      #load: f'{output_dir}/emulator.npy'
      #emulator:
      #  save: f'{output_dir}/emulator.npy'
    #theory.bao:
    #  class: cosmofit.theories.bao.DampedBAOWigglesPowerSpectrumMultipoles
    #  load: f'{output_dir}/emulator.npy'
    #  emulator:
    #    save: f'{output_dir}/emulator.npy'
    param:
      class: cosmofit.theories.power_template.BAOWigglesPowerSpectrumParameterization
  cosmo:
    class: cosmofit.theories.primordial_cosmology.Cosmoprimo

emulate:
  class: MLPEmulatorEngine
  sample: #f'{output_dir}/samples.npy'
    save: f'{output_dir}/samples.npy'
  fit:
    epochs: 10
  init:
    npcs: 20

emulate:
  class: TaylorEmulatorEngine
  init:
    order: 1

do:
  source:
    #profiles: f'{output_dir}/profiles.npy'
    chain: f'{output_dir}/chain_0.npy'
  do: plot

summarize:
  chain:
    fn: f'{output_dir}/chain_0.npy'
    burnin: 0.3
  plot_triangle: f'{output_dir}/triangle.png'
  plot_trace: f'{output_dir}/trace.png'
  plot_autocorrelation_time: f'{output_dir}/autocorrelation_time.png'
  plot_gelman_rubin:
    fn: f'{output_dir}/gelman_rubin.png'
    nsplits: 4
  plot_geweke: f'{output_dir}/geweke.png'

#summarize:
#   profiles: f'{output_dir}/profiles.npy'
#   plot_aligned_stacked: f'{output_dir}/aligned_stacked.png'

sample:
  class: cosmofit.samplers.DynestySampler
  init:
    mode: static
  run:
    max_iterations: 100000
    check_every: 100
  check: True
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.GridSampler
  init:
    ngrid: 2
  save: f'{output_dir}/grid.npy'

sample:
  class: cosmofit.samplers.EmceeSampler
  init:
    nwalkers: 40
  run:
    max_iterations: 10000
    check_every: 100
  check:
    eigen_gr_stop: 0.01
  save: f'{output_dir}/chain_*.npy'

profile:
  class: cosmofit.profilers.MinuitProfiler
  save: f'{output_dir}/profiles.npy'
  run:
    niterations: 2

data_dir: pk
output_dir: tmp

pipeline:
  QSO:
    like:
      class: cosmofit.likelihoods.galaxy_clustering.CorrelationFunctionMultipolesLikelihood
      init:
        data: f'{data_dir}/data.npy'
        covariance: f'{data_dir}/mock_*.npy'
        slim:
          0: [10, 60]
          2: [10, 60]
        sstep: 3
        zeff: 0.5
        fiducial: DESI
      save: f'{output_dir}/QSO.like.npy'
      load: True
      plot: f'{output_dir}/corr.png'
    theory:
      class: cosmofit.theories.galaxy_clustering.DampedBAOWigglesTracerCorrelationFunctionMultipoles
      params:
        .fixed: ['al*']
        .derived: [.varied]
    wiggles:
      class: cosmofit.theories.galaxy_clustering.DampedBAOWigglesCorrelationFunctionMultipoles
      plot: f'{output_dir}/dcorr.png'
  cosmo:
    class: cosmofit.theories.primordial_cosmology.Cosmoprimo

emulate:
  class: MLPEmulator
  sample: #f'{output_dir}/samples.npy'
    save: f'{output_dir}/samples.npy'
  fit:
    epochs: 10
  init:
    npcs: 20

emulate:
  class: TaylorEmulator
  init:
    order: 2

do:
  source: f'{output_dir}/chain_0.npy'
  do: plot

summarize:
  source:
    fn: f'{output_dir}/chain_0.npy'
    burnin: 0.3
  plot_triangle: f'{output_dir}/triangle.png'
  plot_trace: f'{output_dir}/trace.png'
  plot_autocorrelation_time: f'{output_dir}/autocorrelation_time.png'
  plot_gelman_rubin:
    fn: f'{output_dir}/gelman_rubin.png'
    nsplits: 4
  plot_geweke: f'{output_dir}/geweke.png'

#summarize:
#   profiles: f'{output_dir}/profiles.npy'
#   plot_aligned_stacked: f'{output_dir}/aligned_stacked.png'

sample:
  class: cosmofit.samplers.DynestySampler
  init:
    mode: static
  run:
    max_iterations: 100000
    check_every: 100
    check: True
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.GridSampler
  init:
    ngrid: 2
  save: f'{output_dir}/grid.npy'

sample:
  class: cosmofit.samplers.EmceeSampler
  init:
    nwalkers: 40
  run:
    max_iterations: 10000
    check_every: 100
    check:
      max_eigen_gr: 0.01
  save: f'{output_dir}/chain_*.npy'

profile:
  class: cosmofit.profilers.MinuitProfiler
  save: f'{output_dir}/profiles.npy'
  run:
    niterations: 2

data_dir: _xi
output_dir: _bao

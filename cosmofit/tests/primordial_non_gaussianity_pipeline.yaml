pipeline:
  NGC:
    like:
      class: cosmofit.likelihoods.PowerSpectrumMultipolesLikelihood
      init:
        #data: f'{data_dir}/data.npy'
        data: mean
        covariance: f'{data_dir}/mock_*.npy'
        wmatrix: f'{data_dir}/window.npy'
        klim:
          0: [0.02, 0.2]
          2: [0.02, 0.2]
        kstep: 0.01
        zeff: 2.0
        fiducial: DESI
      save: f'{output_dir}/pnglike_QSO_NGC.npy'
      load: True
      plot: f'{output_dir}/power_NGC.png'
  SGC:
    like:
      class: cosmofit.likelihoods.PowerSpectrumMultipolesLikelihood
      init:
        #data: f'{data_dir}/data.npy'
        data: mean
        covariance: f'{data_dir}/mock_*.npy'
        wmatrix: f'{data_dir}/window.npy'
        klim:
          0: [0.02, 0.2]
          2: [0.02, 0.2]
        kstep: 0.01
        zeff: 2.0
        fiducial: DESI
      save: f'{output_dir}/pnglike_QSO_SGC.npy'
      load: True
  theory:
    class: cosmofit.theories.primordial_non_gaussianity.PrimordialNonGaussianityPowerSpectrumMultipoles
  cosmo:
    class: cosmofit.theories.primordial_cosmology.Cosmoprimo
    init:
      fiducial: DESI

summarize:
  chain:
    fn: f'{output_dir}/chain_0.npy'
    burnin: 0.3
  plot_triangle: f'{output_dir}/triangle.png'
  plot_trace: f'{output_dir}/trace.png'
  plot_autocorrelation_time: f'{output_dir}/autocorrelation_time.png'
  plot_gelman_rubin:
    fn: f'{output_dir}/gelman_rubin.png'
    nsplits: 4
  plot_geweke: f'{output_dir}/geweke.png'

#summarize:
#   profiles: f'{output_dir}/profiles.npy'
#   plot_aligned_stacked: f'{output_dir}/aligned_stacked.png'

do:
  #source:
  #  profiles: f'{output_dir}/profiles.npy'
    #chain: f'{output_dir}/chain_0.npy'
  do: plot

sample:
  class: cosmofit.samplers.EmceeSampler
  init:
    nwalkers: 40
  run:
    max_iterations: 10000
    check_every: 100
  check: True
  save: f'{output_dir}/chain_*.npy'

profile:
  class: cosmofit.profilers.MinuitProfiler
  save: f'{output_dir}/profiles.npy'

data_dir: pk
output_dir: tmp

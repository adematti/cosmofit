pipeline:
  QSO:
    like:
      class: cosmofit.likelihoods.clustering.PowerSpectrumMultipolesLikelihood
      init:
        data: f'{data_dir}/data.npy'
        covariance: f'{data_dir}/mock_*.npy'
        #wmatrix: f'{data_dir}/window.npy'
        klim:
          0: [0.02, 0.2]
          2: [0.02, 0.2]
          4: [0.02, 0.2]
        kstep: 0.01
        zeff: 0.5
        fiducial: DESI
      save: f'{output_dir}/QSO.like.npy'
      load: True
      plot: f'{output_dir}/power.png'
    theory:
      #class: cosmofit.theories.clustering.LPTTracerPowerSpectrumMultipoles
      #class: cosmofit.theories.clustering.PyBirdTracerPowerSpectrumMultipoles
      #class: cosmofit.theories.clustering.KaiserTracerPowerSpectrumMultipoles
      #class: cosmofit.theories.clustering.EPTMomentsTracerPowerSpectrumMultipoles
      #class: cosmofit.theories.clustering.EPTFullResummedTracerPowerSpectrumMultipoles
      class: cosmofit.theories.clustering.LPTMomentsTracerPowerSpectrumMultipoles
      params:
      #  .derived: [.varied]
      #  .fixed: '*'
        #c*:
        #  derived: '.auto'
        #alpha*:
        #  derived: '.auto'
        #sn*:
        #  derived: '.auto'
      #load: f'{output_dir}/fs_emulator.npy'
      #emulator:
      #  init:
      #    #order: {'*': 1, 'q*': 2, 'b1': 2}
      #    order: {'*': 1}
      #  plot: f'{output_dir}/fs_emulator_*.png'
      #  save: f'{output_dir}/fs_emulator.npy'
    #pt:
      #class: cosmofit.theories.clustering.LPTPowerSpectrumMultipoles
    #  class: cosmofit.theories.clustering.PyBirdPowerSpectrumMultipoles
    #  load: f'{output_dir}/emulator.npy'
    #  emulator:
    #    save: f'{output_dir}/emulator.npy'
    #pt:
    #  class: cosmofit.theories.full_shape.LPTPowerSpectrumMultipoles
    #  load: f'{output_dir}/emulator.npy'
    #  emulator:
    #    save: f'{output_dir}/emulator.npy'
    shapefit:
      class: cosmofit.theories.clustering.ShapeFitPowerSpectrumParameterization
    #full:
    #  class: cosmofit.theories.clustering.FullPowerSpectrumParameterization
    #  init:
    #    fiducial: DESI
    #  params:
    #    .fixed: n_s
    #    logA:
    #      prior:
    #        limits: [1.61, 3.91]
    #      ref:
    #        dist: norm
    #        loc: 2.84
    #        scale: 0.01
    #      drop: True
    #      latex: \log(10^{10} A_{\mathrm{s}})
    #    A_s:
    #      derived: '1e-10 * np.exp({logA})'
    #wiggle:
    #  class: cosmofit.theories.clustering.WiggleSplitPowerSpectrumParameterization
    #pthetap:
    #  class: cosmofit.theories.clustering.BandVelocityPowerSpectrumParameterization
    #  init:
    #    kptt: e'np.linspace(0.03, 0.18, 3)'
    #  params:
    #    #.fixed: [f, qap]
    #    .fixed: [f]
    #    #.fixed: '*'
    #ptheta:
    #  class: cosmofit.theories.clustering.BandVelocityPowerSpectrumTemplate
    #  params:
    #    rptt*:
    #      value: 0.
    #      prior:
    #        dist: norm
    #        loc: 0.
    #        scale: 2.
  cosmo:
    class: cosmofit.theories.primordial_cosmology.Cosmoprimo

emulate:
  class: TaylorEmulator
  init:
    order: 1

summarize:
  source:
    fn: f'{output_dir}/chain_0.npy'
    burnin: 0.5
  plot_triangle: f'{output_dir}/triangle.png'
  plot_trace: f'{output_dir}/trace.png'
  plot_autocorrelation_time: f'{output_dir}/autocorrelation_time.png'
  plot_gelman_rubin:
    fn: f'{output_dir}/gelman_rubin.png'
    nsplits: 4
  plot_geweke: f'{output_dir}/geweke.png'

summarize:
   source: f'{output_dir}/profiles.npy'
   stats: f'{output_dir}/stats.tex'

sample:
  class: cosmofit.samplers.QMCSampler
  run:
    niterations: 2
  save: f'{output_dir}/grid.npy'

sample:
  class: cosmofit.samplers.ZeusSampler
  init:
    #nwalkers: 40
    chains: 1
  run:
    max_iterations: 10000
    check_every: 100
    check: True
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.PocoMCSampler
  init:
    #nwalkers: 40
    chains: 1 #f'{output_dir}/chain_0.npy'
  run:
    max_iterations: 10000
    check: True
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.DynestySampler
  init:
    chains: 1 #f'{output_dir}/chain_0.npy'
    mode: dynamic
  run:
    check:
      dlogz: 1
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.MCMCSampler
  init:
    covariance: f'{output_dir}/chain_0.npy'
    chains: 1 #f'{output_dir}/chain_0.npy'
    drag: True
    oversample_power: 0.4
  run:
    check: True
    check_every: 10
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.PolychordSampler
  init:
    chains: 1 #f'{output_dir}/chain_0.npy'
  run:
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.EmceeSampler
  init:
    #nwalkers: 40
    chains: 1
    max_tries: 10
  run:
    max_iterations: 10000
    check_every: 100
    check: True
  save: f'{output_dir}/chain_*.npy'

profile:
  class: cosmofit.profilers.BOBYQAProfiler
  init:
    rescale: True
  maximize:
    niterations: 1
  save: f'{output_dir}/profiles.npy'

profile:
  class: cosmofit.profilers.ScipyProfiler
  init:
    rescale: True
  maximize:
    niterations: 1
  save: f'{output_dir}/profiles.npy'

profile:
  class: cosmofit.profilers.MinuitProfiler
  maximize:
    niterations: 1
  save: f'{output_dir}/profiles.npy'

do:
  source: f'{output_dir}/chain_0.npy'
  do: plot

data_dir: _pk
output_dir: _fs

pipeline:
  QSO:
    like:
      class: cosmofit.likelihoods.CorrelationFunctionMultipolesLikelihood
      init:
        data: f'{data_dir}/data.npy'
        covariance: f'{data_dir}/mock_*.npy'
        slim:
          0: [10, 60]
          2: [10, 60]
        sstep: 5
        zeff: 0.5
        fiducial: DESI
      save: f'{output_dir}/QSO.like.npy'
      load: True
      plot: f'{output_dir}/corr.png'
    theory:
      class: cosmofit.theories.full_shape.LPTTracerCorrelationFunctionMultipoles
    #lpt:
    #  class: cosmofit.theories.full_shape.LPTPowerSpectrumMultipoles
      #load: f'{output_dir}/emulator.npy'
    #  emulator:
    #    save: f'{output_dir}/emulator.npy'
    #shapefit:
    #  class: cosmofit.theories.power_template.ShapeFitPowerSpectrumParameterization
    pthetap:
      class: cosmofit.theories.power_template.BandVelocityPowerSpectrumParameterization
      init:
        kptt: e'np.linspace(0.02, 0.2, 4)'
    #ptheta:
    #  class: cosmofit.theories.power_template.BandVelocityPowerSpectrumTemplate
    #  params:
    #    rptt*:
    #      value: 0.
    #      prior:
    #        dist: norm
    #        loc: 0.
    #        scale: 2.
  cosmo:
    class: cosmofit.theories.primordial_cosmology.Cosmoprimo

emulate:
  class: TaylorEmulatorEngine
  fit:
    order: 1

summarize:
  chain:
    fn: f'{output_dir}/chain_0.npy'
    burnin: 0.3
  plot_triangle: f'{output_dir}/triangle.png'
  plot_trace: f'{output_dir}/trace.png'
  plot_autocorrelation_time: f'{output_dir}/autocorrelation_time.png'
  plot_gelman_rubin:
    fn: f'{output_dir}/gelman_rubin.png'
    nsplits: 4
  plot_geweke: f'{output_dir}/geweke.png'

#summarize:
#   profiles: f'{output_dir}/profiles.npy'
#   plot_aligned_stacked: f'{output_dir}/aligned_stacked.png'

sample:
  class: cosmofit.samplers.QMCSampler
  run:
    niterations: 2
  save: f'{output_dir}/grid.npy'

sample:
  class: cosmofit.samplers.DynestySampler
  init:
    mode: static
  run:
    max_iterations: 10000
    check_every: 100
  check: True
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.EmceeSampler
  init:
    nwalkers: 40
  run:
    max_iterations: 10000
    check_every: 100
  check: True
  save: f'{output_dir}/chain_*.npy'

profile:
  class: cosmofit.profilers.MinuitProfiler
  save: f'{output_dir}/profiles.npy'

data_dir: _xi
output_dir: _fs

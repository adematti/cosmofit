pipeline:
  like:
    class: cosmofit.likelihoods.galaxy_clustering.PowerSpectrumMultipolesLikelihood
    init:
      data: f'{data_dir}/data.npy'
      #covariance_scale: True
      #data: f'{data_dir}/mock_*.npy'
      covariance: f'{data_dir}/mock_*.npy'
      #wmatrix: f'{data_dir}/window.npy'
      klim:
        0: [0.05, 0.2]
        2: [0.05, 0.2]
      kstep: 0.02
      zeff: 0.5
      fiducial: DESI
    save: f'{output_dir}/QSO.like.npy'
    load: True
    plot: f'{output_dir}/power.png'
    plot_bao: f'{output_dir}/power_bao.png'
  #window:
  #  class: cosmofit.theories.galaxy_clustering.WindowedPowerSpectrumMultipoles
  #  plot: f'{output_dir}/window.png'
  theory:
    class: cosmofit.theories.galaxy_clustering.DampedBAOWigglesTracerPowerSpectrumMultipoles
    init:
      nowiggle: False
    params:
      .delete: ['al*-3', 'al*-2', 'al*-1', 'al*1']
      al*:
        derived: '.auto'
        prior:
          dist: 'norm'
          loc: 0.
          scale: 1e5
      #.derived: [.varied]
    #load: f'{output_dir}/emulator.npy'
    emulator:
      plot: f'{output_dir}/emulator_*.png'
      save: f'{output_dir}/emulator.npy'
  #theory.bao:
  #  class: cosmofit.theories.galaxy_clustering.DampedBAOWigglesPowerSpectrumMultipoles
  #  load: f'{output_dir}/emulator.npy'
  #  emulator:
  #    save: f'{output_dir}/emulator.npy'
  param:
    class: cosmofit.theories.galaxy_clustering.BAOPowerSpectrumParameterization
    init:
      #mode: qiso
  cosmo:
    class: cosmofit.theories.primordial_cosmology.Cosmoprimo

emulate:
  class: MLPEmulator
  sample: #f'{output_dir}/samples.npy'
    niterations: 1000
    save: f'{output_dir}/samples.npy'
  fit:
    epochs: 10
  init:
    npcs: 10

emulate:
  class: TaylorEmulator
  init:
    order: {'*': 2, 'al*': 1}

do:
  source: f'{output_dir}/profiles.npy'
  #do: plot

summarize:
  source:
    fn: f'{output_dir}/chain_0.npy'
    burnin: 0.3
  plot_triangle: f'{output_dir}/triangle.png'
  plot_trace: f'{output_dir}/trace.png'
  plot_autocorrelation_time: f'{output_dir}/autocorrelation_time.png'
  plot_gelman_rubin:
    fn: f'{output_dir}/gelman_rubin.png'
    nsplits: 4
  plot_geweke: f'{output_dir}/geweke.png'

summarize:
   source:
     - f'{output_dir}/profiles.npy'
     - f'{output_dir}/profiles_nowiggle.npy'
   stats:
     - f'{output_dir}/stats.tex'
     - f'{output_dir}/stats_nowiggle.tex'
   plot_aligned_stacked: f'{output_dir}/aligned_stacked.png'
   plot_profile_comparison: f'{output_dir}/profile_comparison.png'

sample:
  class: cosmofit.samplers.DynestySampler
  init:
    mode: static
  run:
    max_iterations: 100000
    check_every: 100
    check: True
  save: f'{output_dir}/chain_*.npy'

sample:
  class: cosmofit.samplers.GridSampler
  init:
    ngrid: 2
  save: f'{output_dir}/grid.npy'

sample:
  class: cosmofit.samplers.EmceeSampler
  init:
    nwalkers: 40
  run:
    max_iterations: 10000
    check_every: 100
    check:
      max_eigen_gr: 0.01
  save: f'{output_dir}/chain_*.npy'

profile:
  class: cosmofit.profilers.MinuitProfiler
  save: e'{output_dir} + ("/profiles_nowiggle.npy" if {pipeline.theory.init.nowiggle} else "/profiles.npy")'
  init:
    seed: 42
  maximize:
    niterations: 1
  #interval:
  profile:

data_dir: _pk
output_dir: _bao
